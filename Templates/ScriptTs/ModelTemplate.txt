@{
//コード生成に必要な一時変数をまとめて定義する

  // クラス名
  string TargetClassName = Model.TemplateFilesConfig.HeadPrefix + Model.SiteDefinition.SiteVariableName + Model.TemplateFilesConfig.EndPrefix;
  // ユーザー拡張要素が定義されたクラス名
  string ExtensionElementsClassName = TargetClassName + "ExtensionElements"; 

}
/**
 *
 * [注意]
 *  自動生成されたコードです。
 *  変更時には十分注意して変更してください。
 *
 *  [生成コマンド]
 *  https://github.com/yamada28go/HackPleasanterApiCli
 *
 *  [生成元テンプレートファイル]
 *  https://github.com/yamada28go/HackPleasanterApi.pleasanter-web-script
 *
 *  [動作に必用なライブラリ]
 *  https://www.npmjs.com/package/@@yamada28go/pleasanter-web-script-type-helper
 *
 */
import { PleasanterDate } from "@@yamada28go/pleasanter-web-script-type-helper";


export class @Raw(TargetClassName) {
  public constructor(public _rawData: RecordDataItems) {
  }

            @* ClassHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.ClassHash) {

<text>
                    get </text> @Raw(item.VariableName) <text> (): string | undefined
                    {
                        </text>
                        <text>
                        return this._rawData?.ClassHash?.@(item.ColumnName);
                    }
                    </text>

<text>

                    set </text> @Raw(item.VariableName) <text> (value: string | undefined) {

                                                </text>
                        <text>
                            const tv = this._rawData.ClassHash || {};
                            tv.@(item.ColumnName) = value;
                    }
                            </text>

            }


            @* NumHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.NumHash) {

<text>
                    get </text> @Raw(item.VariableName) <text> (): number | undefined
                    {
                        </text>
                        <text>
                        return this._rawData?.NumHash?.@(item.ColumnName);
                    }
                    </text>

<text>

                    set </text> @Raw(item.VariableName) <text> (value: number | undefined) {

                                                </text>
                        <text>
                            const tv = this._rawData.NumHash || {};
                            tv.@(item.ColumnName) = value;
                    }
                            </text>

            }


            @* DateHashの出力定義(生データ参照用) *@
            @foreach (var item in Model.ClassifiedInterface.DateHash) {

<text>
                    get </text> @Raw(item.VariableName)<text>_raw (): string | undefined
                    {
                        </text>
                        <text>
                        return this._rawData?.DateHash?.@(item.ColumnName);
                    }
                    </text>

<text>

                    set </text> @Raw(item.VariableName)<text>_raw (value: string | undefined) {

                                                </text>
                        <text>
                            const tv = this._rawData.DateHash || {};
                            tv.@(item.ColumnName) = value;
                    }
                            </text>

            }

            @* DateHashの出力定義(PleasanterDateラッピング用) *@
            @foreach (var item in Model.ClassifiedInterface.DateHash) {

<text>
                    get </text> @Raw(item.VariableName)<text> (): PleasanterDate | undefined
                    {
                        </text>
                        <text>
                        const data =  this._rawData?.DateHash?.@(item.ColumnName);
                        if (data) {
                        return new PleasanterDate(data!);
                        }

                        return undefined;

                    }
                    </text>

<text>

                    set </text> @Raw(item.VariableName)<text> (value: PleasanterDate | undefined) {

                                                </text>
                        <text>
                                                                            const tv = this._rawData.DateHash || {};

    if (value) {
      tv.@(item.ColumnName) = value.getPleasanterDateString();
    } else {
      tv.@(item.ColumnName) = undefined;
    }
                    }
                            </text>

            }


            @* CheckHash *@
            @foreach (var item in Model.ClassifiedInterface.CheckHash) {

<text>
                    get </text> @Raw(item.VariableName) <text> (): boolean | undefined
                    {
                        </text><text>
                        return this._rawData?.CheckHash?.@(item.ColumnName);
                    }
                    </text>
<text>

                    set </text> @Raw(item.VariableName) <text> (value: boolean | undefined) {
                        </text><text>
                             const tv = this._rawData.CheckHash || {};    
                            tv.@(item.ColumnName) = value;
                    }
</text>

            }


            @* AttachmentsHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.AttachmentsHash) {

<text>
                    get </text> @Raw(item.VariableName) <text> (): AttachmentsData[] | undefined
                    {
                        </text><text>
                        return this._rawData?.AttachmentsHash?.@(item.ColumnName);
                    }
                    </text>

<text>

                    set </text> @Raw(item.VariableName) <text> (value: AttachmentsData[] | undefined) {
                        </text><text>
                             const tv = this._rawData.AttachmentsHash || {};    
                            tv.@(item.ColumnName) = value;
                    }
</text>



            }

}


            @* ClassHashの出力定義 *@
            @foreach (var item in Model.ClassifiedInterface.ClassHash) {

<text>
                // 項目の検索選択肢
                export const enum @Raw(item.VariableName)_Choices 
                {
</text>

                @foreach (var chItem in item?.ChoicesTextInfos) {
                    <text>
                    // @Raw(chItem.Description)
                         _@Raw(chItem.VariableName) ="@Raw(chItem.Value)",
                    </text>
                
                }
<text>
                }
                </text>


<text>
                // 項目の検索選択肢
                export function toString_@Raw(item.VariableName) ( value : </text> @Raw(item.VariableName)<text>_Choices )
                {


                    switch( value ){

</text>
                @foreach (var chItem in item?.ChoicesTextInfos) {
<text>
                        case @Raw(item.VariableName)_Choices . _@Raw(chItem.VariableName):
                            {
                                return "@Raw(chItem.Description)";
                            }
</text>
                }

<text>

                    }

                    return "Error";

                }

                </text>
}